//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Alnet.AudioServer.Web.AudioServerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="audioserver", ConfigurationName="AudioServerService.IAudioServerService")]
    internal interface IAudioServerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/CreateFileAudioPlayer", ReplyAction="audioserver/IAudioServerService/CreateFileAudioPlayerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/CreateFileAudioPlayerFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        Alnet.AudioServerContract.DTO.AudioPlayerDTO CreateFileAudioPlayer(string name, string directoryPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/CreateVKAudioPlayer", ReplyAction="audioserver/IAudioServerService/CreateVKAudioPlayerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/CreateVKAudioPlayerFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        Alnet.AudioServerContract.DTO.AudioPlayerDTO CreateVKAudioPlayer(string name, int vkProfileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/RemoveAudioPlayer", ReplyAction="audioserver/IAudioServerService/RemoveAudioPlayerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/RemoveAudioPlayerFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        void RemoveAudioPlayer(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/GetAudioPlayes", ReplyAction="audioserver/IAudioServerService/GetAudioPlayesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/GetAudioPlayesFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        Alnet.AudioServerContract.DTO.AudioPlayerDTO[] GetAudioPlayes();
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/GetAllChannels", ReplyAction="audioserver/IAudioServerService/GetAllChannelsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/GetAllChannelsFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        Alnet.AudioServerContract.DTO.ChannelDTO[] GetAllChannels();
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/GetEnabledChannels", ReplyAction="audioserver/IAudioServerService/GetEnabledChannelsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/GetEnabledChannelsFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        Alnet.AudioServerContract.DTO.ChannelDTO[] GetEnabledChannels(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/GetPlaybackPosition", ReplyAction="audioserver/IAudioServerService/GetPlaybackPositionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/GetPlaybackPositionFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        Alnet.AudioServerContract.DTO.PlaybackPositionDTO GetPlaybackPosition(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/GetSounds", ReplyAction="audioserver/IAudioServerService/GetSoundsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/GetSoundsFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        Alnet.AudioServerContract.DTO.SoundDTO[] GetSounds(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/GetAudioPlayer", ReplyAction="audioserver/IAudioServerService/GetAudioPlayerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/GetAudioPlayerFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        Alnet.AudioServerContract.DTO.AudioPlayerDTO GetAudioPlayer(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/Play", ReplyAction="audioserver/IAudioServerService/PlayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/PlayFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        void Play(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/PlayConcrete", ReplyAction="audioserver/IAudioServerService/PlayConcreteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/PlayConcreteFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        void PlayConcrete(System.Guid playerId, int soundId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/MoveNextSound", ReplyAction="audioserver/IAudioServerService/MoveNextSoundResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/MoveNextSoundFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        void MoveNextSound(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/MovePrevSound", ReplyAction="audioserver/IAudioServerService/MovePrevSoundResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/MovePrevSoundFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        void MovePrevSound(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/Stop", ReplyAction="audioserver/IAudioServerService/StopResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/StopFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        void Stop(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioServerService/ChangeChannelState", ReplyAction="audioserver/IAudioServerService/ChangeChannelStateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Alnet.AudioServerContract.FaultCodes), Action="audioserver/IAudioServerService/ChangeChannelStateFaultCodesFault", Name="FaultCodes", Namespace="http://schemas.datacontract.org/2004/07/Alnet.AudioServerContract")]
        void ChangeChannelState(System.Guid playerId, int channelIndex, bool newState);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IAudioServerServiceChannel : Alnet.AudioServer.Web.AudioServerService.IAudioServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class AudioServerServiceClient : System.ServiceModel.ClientBase<Alnet.AudioServer.Web.AudioServerService.IAudioServerService>, Alnet.AudioServer.Web.AudioServerService.IAudioServerService {
        
        public AudioServerServiceClient() {
        }
        
        public AudioServerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AudioServerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AudioServerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AudioServerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Alnet.AudioServerContract.DTO.AudioPlayerDTO CreateFileAudioPlayer(string name, string directoryPath) {
            return base.Channel.CreateFileAudioPlayer(name, directoryPath);
        }
        
        public Alnet.AudioServerContract.DTO.AudioPlayerDTO CreateVKAudioPlayer(string name, int vkProfileId) {
            return base.Channel.CreateVKAudioPlayer(name, vkProfileId);
        }
        
        public void RemoveAudioPlayer(System.Guid playerId) {
            base.Channel.RemoveAudioPlayer(playerId);
        }
        
        public Alnet.AudioServerContract.DTO.AudioPlayerDTO[] GetAudioPlayes() {
            return base.Channel.GetAudioPlayes();
        }
        
        public Alnet.AudioServerContract.DTO.ChannelDTO[] GetAllChannels() {
            return base.Channel.GetAllChannels();
        }
        
        public Alnet.AudioServerContract.DTO.ChannelDTO[] GetEnabledChannels(System.Guid playerId) {
            return base.Channel.GetEnabledChannels(playerId);
        }
        
        public Alnet.AudioServerContract.DTO.PlaybackPositionDTO GetPlaybackPosition(System.Guid playerId) {
            return base.Channel.GetPlaybackPosition(playerId);
        }
        
        public Alnet.AudioServerContract.DTO.SoundDTO[] GetSounds(System.Guid playerId) {
            return base.Channel.GetSounds(playerId);
        }
        
        public Alnet.AudioServerContract.DTO.AudioPlayerDTO GetAudioPlayer(System.Guid playerId) {
            return base.Channel.GetAudioPlayer(playerId);
        }
        
        public void Play(System.Guid playerId) {
            base.Channel.Play(playerId);
        }
        
        public void PlayConcrete(System.Guid playerId, int soundId) {
            base.Channel.PlayConcrete(playerId, soundId);
        }
        
        public void MoveNextSound(System.Guid playerId) {
            base.Channel.MoveNextSound(playerId);
        }
        
        public void MovePrevSound(System.Guid playerId) {
            base.Channel.MovePrevSound(playerId);
        }
        
        public void Stop(System.Guid playerId) {
            base.Channel.Stop(playerId);
        }
        
        public void ChangeChannelState(System.Guid playerId, int channelIndex, bool newState) {
            base.Channel.ChangeChannelState(playerId, channelIndex, newState);
        }
    }
}
