//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Alnet.AudioServer.Web.AudioServerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="audioserver", ConfigurationName="AudioServerService.IAudioPlayerService")]
    internal interface IAudioPlayerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/GetAudioPlayes", ReplyAction="audioserver/IAudioPlayerService/GetAudioPlayesResponse")]
        Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO[] GetAudioPlayes();
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/GetAudioPlayes", ReplyAction="audioserver/IAudioPlayerService/GetAudioPlayesResponse")]
        System.Threading.Tasks.Task<Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO[]> GetAudioPlayesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/CreateFileAudioPlayer", ReplyAction="audioserver/IAudioPlayerService/CreateFileAudioPlayerResponse")]
        Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO CreateFileAudioPlayer(string name, string directoryPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/CreateFileAudioPlayer", ReplyAction="audioserver/IAudioPlayerService/CreateFileAudioPlayerResponse")]
        System.Threading.Tasks.Task<Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO> CreateFileAudioPlayerAsync(string name, string directoryPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/CreateVKAudioPlayer", ReplyAction="audioserver/IAudioPlayerService/CreateVKAudioPlayerResponse")]
        Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO CreateVKAudioPlayer(string name, int vkProfileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/CreateVKAudioPlayer", ReplyAction="audioserver/IAudioPlayerService/CreateVKAudioPlayerResponse")]
        System.Threading.Tasks.Task<Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO> CreateVKAudioPlayerAsync(string name, int vkProfileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/GetPlaylistAudioPlayer", ReplyAction="audioserver/IAudioPlayerService/GetPlaylistAudioPlayerResponse")]
        Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO GetPlaylistAudioPlayer(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/GetPlaylistAudioPlayer", ReplyAction="audioserver/IAudioPlayerService/GetPlaylistAudioPlayerResponse")]
        System.Threading.Tasks.Task<Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO> GetPlaylistAudioPlayerAsync(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/Play", ReplyAction="audioserver/IAudioPlayerService/PlayResponse")]
        void Play(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/Play", ReplyAction="audioserver/IAudioPlayerService/PlayResponse")]
        System.Threading.Tasks.Task PlayAsync(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/PlayConcrete", ReplyAction="audioserver/IAudioPlayerService/PlayConcreteResponse")]
        void PlayConcrete(System.Guid playerId, int soundId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/PlayConcrete", ReplyAction="audioserver/IAudioPlayerService/PlayConcreteResponse")]
        System.Threading.Tasks.Task PlayConcreteAsync(System.Guid playerId, int soundId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/Stop", ReplyAction="audioserver/IAudioPlayerService/StopResponse")]
        void Stop(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="audioserver/IAudioPlayerService/Stop", ReplyAction="audioserver/IAudioPlayerService/StopResponse")]
        System.Threading.Tasks.Task StopAsync(System.Guid playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IAudioPlayerServiceChannel : Alnet.AudioServer.Web.AudioServerService.IAudioPlayerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class AudioPlayerServiceClient : System.ServiceModel.ClientBase<Alnet.AudioServer.Web.AudioServerService.IAudioPlayerService>, Alnet.AudioServer.Web.AudioServerService.IAudioPlayerService {
        
        public AudioPlayerServiceClient() {
        }
        
        public AudioPlayerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AudioPlayerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AudioPlayerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AudioPlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO[] GetAudioPlayes() {
            return base.Channel.GetAudioPlayes();
        }
        
        public System.Threading.Tasks.Task<Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO[]> GetAudioPlayesAsync() {
            return base.Channel.GetAudioPlayesAsync();
        }
        
        public Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO CreateFileAudioPlayer(string name, string directoryPath) {
            return base.Channel.CreateFileAudioPlayer(name, directoryPath);
        }
        
        public System.Threading.Tasks.Task<Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO> CreateFileAudioPlayerAsync(string name, string directoryPath) {
            return base.Channel.CreateFileAudioPlayerAsync(name, directoryPath);
        }
        
        public Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO CreateVKAudioPlayer(string name, int vkProfileId) {
            return base.Channel.CreateVKAudioPlayer(name, vkProfileId);
        }
        
        public System.Threading.Tasks.Task<Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO> CreateVKAudioPlayerAsync(string name, int vkProfileId) {
            return base.Channel.CreateVKAudioPlayerAsync(name, vkProfileId);
        }
        
        public Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO GetPlaylistAudioPlayer(System.Guid playerId) {
            return base.Channel.GetPlaylistAudioPlayer(playerId);
        }
        
        public System.Threading.Tasks.Task<Alnet.AudioServerContract.DTO.PlaylistAudioPlayerDTO> GetPlaylistAudioPlayerAsync(System.Guid playerId) {
            return base.Channel.GetPlaylistAudioPlayerAsync(playerId);
        }
        
        public void Play(System.Guid playerId) {
            base.Channel.Play(playerId);
        }
        
        public System.Threading.Tasks.Task PlayAsync(System.Guid playerId) {
            return base.Channel.PlayAsync(playerId);
        }
        
        public void PlayConcrete(System.Guid playerId, int soundId) {
            base.Channel.PlayConcrete(playerId, soundId);
        }
        
        public System.Threading.Tasks.Task PlayConcreteAsync(System.Guid playerId, int soundId) {
            return base.Channel.PlayConcreteAsync(playerId, soundId);
        }
        
        public void Stop(System.Guid playerId) {
            base.Channel.Stop(playerId);
        }
        
        public System.Threading.Tasks.Task StopAsync(System.Guid playerId) {
            return base.Channel.StopAsync(playerId);
        }
    }
}
